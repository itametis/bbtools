#!/usr/bin/env bash
#####
## COPYRIGHT © ITAMETIS - TOUS DROITS RÉSERVÉS
## Pour plus d'information veuillez contacter : copyright@itametis.com
#####

INVOKED_COMMAND=$_
MAIN_EXEC="bb"


#####
# Removes all the content of the target directory (but keep the directory itself).
##
_clean() {
    if [ -e "${BB_TARGET_FOLDER}" ]; then
        rm -rf "${BB_TARGET_FOLDER}/*"
    fi
}


#####
# Initializes all environments variables used by BBTOOLS during build.
##
_define_global_environment_variables() {
    # Build paths
    export_variable "BB_BUILD_FOLDER" "$(pwd)"
    export_variable "BB_SRC_FOLDER" "${BB_BUILD_FOLDER}/src"
    export_variable "BB_TARGET_FOLDER" "${BB_BUILD_FOLDER}/target"
    export_variable "BB_TARGET_TESTS" "${BB_TARGET_FOLDER}/tests"

    # SHELLCHECK LIB
    export_variable "BB_SHELLCHECK_PATH" "${BBTOOLS_HOME}/lib"
    _init_RUN_SHELLCHECK

    # SHUNIT LIB
    export_variable "BB_SHUNIT_PATH" "${BBTOOLS_HOME}/lib"
    export_variable "RUN_TEST" "${BB_SHUNIT_PATH}/shunit2"

    # Sources paths
    export SRC_PATH="${BB_SRC_FOLDER}/main/shell"
    export TEST_PATH="${BB_SRC_FOLDER}/test/shell"
}


#####
# Finds the installation directory and sets it into the '${BBTOOLS_HOME}' global variable.
##
_define_home_directory() {
    local value=""

    if [ "${INVOKED_COMMAND}" == "./${MAIN_EXEC}" ]; then
        value=".."
    else
        if [ -L "${INVOKED_COMMAND}" ]; then
            INVOKED_COMMAND=$(readlink -f "${INVOKED_COMMAND}")
        fi
        value="${INVOKED_COMMAND/\/bin\/${MAIN_EXEC}/}"
    fi

    export_variable "BBTOOLS_HOME" "${value}"
}


#####
# Display the logo
##
_display_logo() {
    echo ""
    echo "ITAMETIS (c) - BBTOOLS"
    echo ""
}



_exec_shellcheck_file() {
    local file=${1}
    ${RUN_SHELLCHECK} ${file}
}



#####
## Execute un fichier de tests unitaires.
##
## $1 - Le chemin (relatif ou absolu) vers le fichier de tests unitaires à exécuter.
###
_exec_test_file() {
    local BOLD
    local TEXT_RED
    local TEXT_GREEN
#    local TEXT_YELLOW
    local TEXT_BLUE
    local TEXT_CYAN
    local TEXT_WHITE
    local RESET_FORMATTING
    local testFile

    mkdir -p "${BB_TARGET_FOLDER}"
    BOLD=$(tput bold)
    TEXT_RED=$(tput setaf 1)
    TEXT_GREEN=$(tput setaf 2)
#    TEXT_YELLOW=$(tput setaf 3)
    TEXT_BLUE=$(tput setaf 4)
    TEXT_CYAN=$(tput setaf 6)
    TEXT_WHITE=$(tput setaf 7)
    RESET_FORMATTING=$(tput sgr0)

    testFile="${1}"


    echo -e "${TEXT_BLUE}${BOLD}${testFile}${RESET_FORMATTING}"
    echo "-------------------------------------------------------------------------"

    # Filter output using sed
    bash "${testFile}" | sed \
                        -e "s/\(\OK\)/${TEXT_GREEN}${BOLD}\1${TEXT_WHITE}${RESET_FORMATTING}/g" \
                        -e "s/\(test_\)\(.*\)/${BOLD}${TEXT_GREEN}\1${TEXT_WHITE}\2${RESET_FORMATTING}/g" \
                        -e "s/\(FAILED\)\(.*\)/${BOLD}${TEXT_RED}\1${TEXT_CYAN}\2${RESET_FORMATTING}/g" \
                        -e "$!N;s/\(test_.*\)\(\nASSERT:\)/${BOLD}${TEXT_RED}\1${RESET_FORMATTING}/;P;D"


    # Make sure formatting is reset
    echo -ne "${RESET_FORMATTING}"

    echo ""
}



#####
## Scan both sources and text then applie the Shellcheck analysis on.
###
_exec_shellcheck_suite() {
    list=`find ${TEST_PATH}/*test.*`

    for i in ${list}
    do
        _exec_shellcheck_file ${i}
    done
    echo ""
    echo ""
}



#####
## Scans all the ${TEST_PATH} directory tree, builds the test suite to process, start the testing process.
###
_exec_test_suite() {
    local list
    list=$(find "${TEST_PATH}"/*test.*)

    for i in ${list}
    do
        _exec_test_file "${i}"
    done
    echo ""
    echo ""
}


#####
# Exports the specified variable as constant.
# $1 - The name of the variable to export.
# $2 - The value of the variable to export
##
export_variable() {
    declare -r -g "${1}"="$2"
    export "${1?}"
}

export -f export_variable



_init_RUN_SHELLCHECK() {
    local hasShellcheck=$(whereis "shellcheck" | sed  "s|shellcheck:||")

    if [ "${hasShellcheck}" == "" ]; then
        export_variable "RUN_SHELLCHECK" "${BB_SHELLCHECK_PATH}/shellcheck"
    else
        shellcheckPath=$(echo "${hasShellcheck}" | sed "s|^ ||")
        export_variable "RUN_SHELLCHECK" "${shellcheckPath}"
    fi
}



########################################################################################################################
## STEPS
# 1 - Define global variables
_define_home_directory

# 2 - Define buid environment variables
_define_global_environment_variables

# 3 - Read the command line and process it
case "${1}" in
	check)
		_display_logo
		_exec_shellcheck_suite
        ;;


	clean)
		_display_logo
		_clean
        ;;


	test)
		_display_logo
        _clean
		_exec_test_suite
        ;;


	*)
		_display_logo

		echo "Bash Builder Tools (aka BBTOOLS) is provided as is, under the AGPL License which"
        echo "stands for GNU Affero General Public License) under the version 3.0 or at your"
        echo "option any later version of this license."
		echo ""
		echo ""
		echo "Usage: ${MAIN_EXEC} < check | clean | test | help > "
		echo ""
		echo "Goals details :"
        echo "      clean   : removes everything under the './target/' directory and recreates"
        echo "                it after that"
        echo "      check   : execute a script analysis using shellcheck (use the OS installed"
        echo "                version prior to the embedded one."
        echo "      test    : [clean] + processes unit tests."
        echo "      help    : display this command line usage."
		echo ""
		echo ""
		echo "Contact the team       : social@itametis.com"
		echo "Page of project        : https://github.com/itametis/bbtools"
		echo "Find the AGPL license  : http://www.gnu.org/licenses"
		echo ""

		exit 0
		;;

esac
